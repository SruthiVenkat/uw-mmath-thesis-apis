* classification of API uses: Mei wanted to know why this classification; say that, and also mention that we were thinking about misuses at that point (we have an explicit dimension about misuses, but it also was also the overall focus)
-> I guess there is a paragraph just before 2.2 starts that does that, but doesn't include discussion about how we were thinking about misuses. Maybe put that paragraph after the first sentence of 2.1 so we explain why before we do it (and split the paragraph). I think I wouldn't use "who want to introspect about their software", that sounds kind of weird. Maybe a better verb is "who want to understand their software's interactions".
-> made changes in Section 2.1
R2: OK. understand if -> understand whether. Also, this framework aims to exhaustively enumerate all of the ways that a library exposes APIs to clients and to classify them. I wouldn't say that the *framework* is what lets developers understand which parts of their library. It lets them think about what they are actually exporting and whether they mean to do so or not. Like, it's clear when the library developer is exporting a public method as an interface. The library developer may not think that they are exporting a *class* (or annotation) as part of the interface. We point it out, and our Section 2 tool counts it. I wouldn't say that client developers can use the *framework* to inspect how libraries are used (it's the tool output that they can use) but the framework can help compare and contrast the design of different libraries.
-> changed

* More discussion on test suites as a reasonable usage of the client and of the library. I think Jens has work justifying the usage of the client test suites as something that explores the library's behaviour.
-> Section 5.1
R2: be a little more explicit here about two separate and related issues: 1) test suites as reasonable usage of the client (which Mike was specifically asking about) and 2) test suites as reasonable usage of the library
-> changed
R3: I made a small change, see if that is consistent with your
understanding of [15]. "Dietrich et al discuss this in their
work~\cite{dietrich2017construction}; they find that even when
coverage by unit tests is low, the low coverage is made up for by the
fact that programmers are likely to write tests for the parts of the
code that they believe to be most important.  "

* There was a statement about package usage controls that's probably wrong. That statement is currently on page 11 ("Java's namespace is segregated by hierarchical package names".)
-> changed to say "there are no enforced access controls at the level of granularity of packages in plain Java", still on pg. 11
R2: That is incorrect. The compiler will complain if you have a package-visible (not public) method in package P and you try to access it in P'.
-> changed
R3: "Java's namespace is segregated by hierarchical package names, but there is no way to allow or deny others access to specific packages (at a package level granularity) in plain Java."

✓ My observation: Transitive calls: note that whether we care about this depends a bit on the applications: we care more when we're worrying about vulnerabilities, but less when we are trying to fission.
R2: did you do anything about this observation? I guess you don't have to, but maybe it's worthwhile to.
-> added a note to the beginning of pg. 41

✓ There was a discussion about new libraries and getting a set of clients, which may be hard; you should discuss the process of, from a library developer's point of view, getting a suitable set of clients. As an empirical study, it's hard to avoid the need to work on some client set.
-> did you do this?
-> Yes, Section 2.3.2
R2: footnote 4: in the *build* output. Also, between "clients of libraries" and "it provides a dependency tree" there should be an emdash---not a comma.
-> changed

✓ Cite Mike Godfrey and Eric Lee's work (circa 2000) on restructuring code and developer resistance to it. I don't know if you say it in the thesis, but also include things about how the window is when devs are planning breaking major changes anyway.
-> end of Section 3.2
R2: I made some changes. Note that you do a cite like Tran et al~\cite{...} without the space before the ~, which is a non-breaking space. Put the personal communication as a cite as well. Actually I did that myself, but look at the changes.

✓ And, why are certain APIs used?
-> future work
-> added to 5.3
R2: there is a comma splice (https://www.iup.edu/writingcenter/writing-resources/punctuation/comma-splices.html) between "serialization" and "this is done". That should be a period. The paragraph is good.
-> changed

✓ Again on the "why", might be good to spend 5 minutes investigating why there are accesses to non-constant fields by a client to a library. Is it just reads or are there writes too? I know that ASM for instance chose to have fields be accessible because they didn't want to impose the old-school overhead of everything being a method.
-> there's a mix of reads and writes (we don't have this data in the tsvs, so this is from what I saw when I manually inspected a few fields accesses)
-> we specifically discussed jackson-core which I inspected: usually used by other jackson libraries. Wrote about it in Section 2.4.2, currently page 28
R2: ok be a bit careful here and say that our definition of a library/client interface includes between different parts of the same library, e.g. jackson-core and jackson-databind count as library/client. Also, make a comment about WriteableTypeId being a C-struct-like Java class which exposes fields and not methods.
-> changed

✓ R2: In your references check for capitalization, e.g. it should never say java, it should say Java. You need to write {Java} in your bib to get that. also eg JShrink. The citation to VizAPI should be an "inproceedings" not an "article", include the venue and year.
-> changed

---

✓ the sentence in 2.4.2 "This result makes a convincing argument..." is convoluted and should be rewritten.
-> done

✓ It also wasn't clear to Mei that there should be no perf changes; we're just adding visibility limitations basically. So say something about that.
-> end of Section 3.2

✓ Define breaking change; I think it includes semantic changes as well (but you don't). -> "Upon a breaking upgrade, a vanilla API usage will fail to compile." in 2.2.2 doesn't include semantic changes, but I think that's wrong.
-> made changes to text in 2.2.2
-> defined breaking changes in intro

✓ Mike had a good point about APIs being included for completeness purposes even though even upstream doesn't think they'll ever be used. Include a comment on that. It's too bad we don't have results on it. In fact it's kind of an incidental finding from our perspective, but would be interesting to know more about.

✓ Need to qualify the claims about usefulness, since we haven't done any user studies -> potential usefulness
-> where was this?
-> in the abstract

✓ Add limitation about how interpreting graphs is hard.
-> usage-scenarios.tex "A limitation of this tool"


✓ I had thought that it would be interesting to see a "cumulative usage" plot: as you add clients, does the % of the API used reach a saturation point? (Clearly you can't do that experiment, but you can mention it in response to some of the points here)

✓ Mei had said that we could see less summary and more discussion in conclusions in general and yours in particular.

✓ talk about why certain apis are used, read through everything to see if we need to tone down any other claims

